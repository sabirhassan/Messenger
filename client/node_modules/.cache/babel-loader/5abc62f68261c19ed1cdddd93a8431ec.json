{"ast":null,"code":"var _jsxFileName = \"/home/sabirhassan/Desktop/imroz2/client/src/components/dashboard/dashboard.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport NewChatComponent from '../NewChat/newChat';\nimport ChatListComponent from '../ChatList/chatList';\nimport ChatViewComponent from '../ChatView/chatView';\nimport ChatTextBoxComponent from '../ChatTextBox/chatTextBox';\nimport styles from './style';\nimport { Button, withStyles } from '@material-ui/core'; // I need to investigate why sometimes\n// two messages will send instead of just\n// one. I dont know if there are two instances\n// of the chat box component or what...\n// I will be using both .then and async/await\n// in this tutorial to give a feel of both.\n\nclass DashboardComponent extends React.Component {\n  constructor() {\n    super();\n\n    this.signOut = () => {//implemention for signout request\n    };\n\n    this.submitMessage = msg => {\n      const docKey = this.buildDocKey(this.state.chats[this.state.selectedChat].users.filter(_usr => _usr !== this.state.email)[0]);\n      /*\n      firebase\n        .firestore()\n        .collection('chats')\n        .doc(docKey)\n        .update({\n          messages: firebase.firestore.FieldValue.arrayUnion({\n            sender: this.state.email,\n            message: msg,\n            timestamp: Date.now()\n          }),\n          receiverHasRead: false\n        });\n      */\n    };\n\n    this.buildDocKey = friend => [this.state.email, friend].sort().join(':');\n\n    this.newChatBtnClicked = () => this.setState({\n      newChatFormVisible: true,\n      selectedChat: null\n    });\n\n    this.newChatSubmit = async chatObj => {\n      const docKey = this.buildDocKey(chatObj.sendTo);\n      /*\n      await \n        firebase\n          .firestore()\n          .collection('chats')\n          .doc(docKey)\n          .set({\n            messages: [{\n              message: chatObj.message,\n              sender: this.state.email\n            }],\n            users: [this.state.email, chatObj.sendTo],\n            receiverHasRead: false\n          })\n      */\n\n      this.setState({\n        newChatFormVisible: false\n      });\n      this.selectChat(this.state.chats.length - 1);\n    };\n\n    this.selectChat = async chatIndex => {\n      await this.setState({\n        selectedChat: chatIndex,\n        newChatFormVisible: false\n      });\n      this.messageRead();\n    };\n\n    this.goToChat = async (docKey, msg) => {\n      const usersInChat = docKey.split(':');\n      const chat = this.state.chats.find(_chat => usersInChat.every(_user => _chat.users.includes(_user)));\n      this.setState({\n        newChatFormVisible: false\n      });\n      await this.selectChat(this.state.chats.indexOf(chat));\n      this.submitMessage(msg);\n    };\n\n    this.messageRead = () => {\n      const chatIndex = this.state.selectedChat;\n      const docKey = this.buildDocKey(this.state.chats[chatIndex].users.filter(_usr => _usr !== this.state.email)[0]);\n\n      if (this.clickedMessageWhereNotSender(chatIndex)) {\n        /*\n          firebase\n          .firestore()\n          .collection('chats')\n          .doc(docKey)\n          .update({ receiverHasRead: true });\n          */\n      } else {\n        console.log('Clicked message where the user was the sender');\n      }\n    };\n\n    this.clickedMessageWhereNotSender = chatIndex => this.state.chats[chatIndex].messages[this.state.chats[chatIndex].messages.length - 1].sender !== this.state.email;\n\n    this.componentWillMount = () => {\n      const user = {\n        username: localStorage.getItem(\"username\"),\n        password: localStorage.getItem(\"password\")\n      };\n      axios.post('http://localhost:9000/login', user).then(res => {\n        console.log(res);\n\n        if (!res.data) {\n          this.props.history.push('/login');\n        } else {\n          console.log(\"dash\");\n        }\n      });\n      /*\n      firebase.auth().onAuthStateChanged(async _usr => {\n        if(!_usr)\n          this.props.history.push('/login');\n        else {\n          await firebase\n            .firestore()\n            .collection('chats')\n            .where('users', 'array-contains', _usr.email)\n            .onSnapshot(async res => {\n              const chats = res.docs.map(_doc => _doc.data());\n              await this.setState({\n                email: _usr.email,\n                chats: chats,\n                friends: []\n              });\n            })\n        }\n      });\n      */\n    };\n\n    this.state = {\n      selectedChat: null,\n      newChatFormVisible: false,\n      email: null,\n      friends: [],\n      chats: []\n    };\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n\n    if (this.state.email) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"dashboard-container\",\n        id: \"dashboard-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ChatListComponent, {\n        history: this.props.history,\n        userEmail: this.state.email,\n        selectChatFn: this.selectChat,\n        chats: this.state.chats,\n        selectedChatIndex: this.state.selectedChat,\n        newChatBtnFn: this.newChatBtnClicked,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }\n      }), this.state.newChatFormVisible ? null : /*#__PURE__*/React.createElement(ChatViewComponent, {\n        user: this.state.email,\n        chat: this.state.chats[this.state.selectedChat],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 52\n        }\n      }), this.state.selectedChat !== null && !this.state.newChatFormVisible ? /*#__PURE__*/React.createElement(ChatTextBoxComponent, {\n        userClickedInputFn: this.messageRead,\n        submitMessageFn: this.submitMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 82\n        }\n      }) : null, this.state.newChatFormVisible ? /*#__PURE__*/React.createElement(NewChatComponent, {\n        currentuser: this.state.email,\n        goToChatFn: this.goToChat,\n        newChatSubmitFn: this.newChatSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 45\n        }\n      }) : null, /*#__PURE__*/React.createElement(Button, {\n        onClick: this.signOut,\n        className: classes.signOutBtn,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }\n      }, \"Sign Out\"));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 14\n        }\n      }, \"LOADING....\");\n    }\n  }\n\n}\n\nexport default withStyles(styles)(DashboardComponent);","map":{"version":3,"sources":["/home/sabirhassan/Desktop/imroz2/client/src/components/dashboard/dashboard.js"],"names":["React","axios","NewChatComponent","ChatListComponent","ChatViewComponent","ChatTextBoxComponent","styles","Button","withStyles","DashboardComponent","Component","constructor","signOut","submitMessage","msg","docKey","buildDocKey","state","chats","selectedChat","users","filter","_usr","email","friend","sort","join","newChatBtnClicked","setState","newChatFormVisible","newChatSubmit","chatObj","sendTo","selectChat","length","chatIndex","messageRead","goToChat","usersInChat","split","chat","find","_chat","every","_user","includes","indexOf","clickedMessageWhereNotSender","console","log","messages","sender","componentWillMount","user","username","localStorage","getItem","password","post","then","res","data","props","history","push","friends","render","classes","signOutBtn"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nimport NewChatComponent from '../NewChat/newChat';\nimport ChatListComponent from '../ChatList/chatList';\nimport ChatViewComponent from '../ChatView/chatView';\nimport ChatTextBoxComponent from '../ChatTextBox/chatTextBox';\n\nimport styles from './style';\n\nimport { Button, withStyles } from '@material-ui/core';\n\n\n// I need to investigate why sometimes\n// two messages will send instead of just\n// one. I dont know if there are two instances\n// of the chat box component or what...\n\n// I will be using both .then and async/await\n// in this tutorial to give a feel of both.\n\nclass DashboardComponent extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      selectedChat: null,\n      newChatFormVisible: false,\n      email: null,\n      friends: [],\n      chats: []\n    };\n  }\n\n\n  signOut = () => {\n      //implemention for signout request\n  };\n\n  submitMessage = (msg) => {\n    \n    const docKey = this.buildDocKey(this.state.chats[this.state.selectedChat]\n      .users\n      .filter(_usr => _usr !== this.state.email)[0])\n\n    /*\n    firebase\n      .firestore()\n      .collection('chats')\n      .doc(docKey)\n      .update({\n        messages: firebase.firestore.FieldValue.arrayUnion({\n          sender: this.state.email,\n          message: msg,\n          timestamp: Date.now()\n        }),\n        receiverHasRead: false\n      });\n    */\n  }\n\n  // Always in alphabetical order:\n  // 'user1:user2'\n  buildDocKey = (friend) => [this.state.email, friend].sort().join(':');\n\n  newChatBtnClicked = () => this.setState({ newChatFormVisible: true, selectedChat: null });\n\n  newChatSubmit = async (chatObj) => {\n    const docKey = this.buildDocKey(chatObj.sendTo);\n    /*\n    await \n      firebase\n        .firestore()\n        .collection('chats')\n        .doc(docKey)\n        .set({\n          messages: [{\n            message: chatObj.message,\n            sender: this.state.email\n          }],\n          users: [this.state.email, chatObj.sendTo],\n          receiverHasRead: false\n        })\n    */\n    this.setState({ newChatFormVisible: false });\n    this.selectChat(this.state.chats.length - 1);\n  }\n\n  selectChat = async (chatIndex) => {\n    await this.setState({ selectedChat: chatIndex, newChatFormVisible: false });\n    this.messageRead();\n  }\n\n  goToChat = async (docKey, msg) => {\n    const usersInChat = docKey.split(':');\n    const chat = this.state.chats.find(_chat => usersInChat.every(_user => _chat.users.includes(_user)));\n    this.setState({ newChatFormVisible: false });\n    await this.selectChat(this.state.chats.indexOf(chat));\n    this.submitMessage(msg);\n  }\n\n  // Chat index could be different than the one we are currently on in the case\n  // that we are calling this function from within a loop such as the chatList.\n  // So we will set a default value and can overwrite it when necessary.\n  messageRead = () => {\n    const chatIndex = this.state.selectedChat;\n    const docKey = this.buildDocKey(this.state.chats[chatIndex].users.filter(_usr => _usr !== this.state.email)[0]);\n    if(this.clickedMessageWhereNotSender(chatIndex)) {\n      /*\n        firebase\n        .firestore()\n        .collection('chats')\n        .doc(docKey)\n        .update({ receiverHasRead: true });\n        */\n    } \n    else {\n      console.log('Clicked message where the user was the sender');\n    }\n  }\n\n  clickedMessageWhereNotSender = (chatIndex) => this.state.chats[chatIndex].messages[this.state.chats[chatIndex].messages.length - 1].sender !== this.state.email;\n\n  componentWillMount = () => {\n\n    const user ={\n      username:localStorage.getItem(\"username\"),\n      password:localStorage.getItem(\"password\")\n    }\n\n    axios.post('http://localhost:9000/login', user)\n    .then(res => {\n      console.log(res);\n      if(!(res.data)){\n\n        this.props.history.push('/login');\n      }\n      else{\n\n        console.log(\"dash\")\n      \n      }\n    })\n\n\n      /*\n      firebase.auth().onAuthStateChanged(async _usr => {\n        if(!_usr)\n          this.props.history.push('/login');\n        else {\n          await firebase\n            .firestore()\n            .collection('chats')\n            .where('users', 'array-contains', _usr.email)\n            .onSnapshot(async res => {\n              const chats = res.docs.map(_doc => _doc.data());\n              await this.setState({\n                email: _usr.email,\n                chats: chats,\n                friends: []\n              });\n            })\n        }\n    });\n    */\n  }\n\n  render() {\n\n    const { classes } = this.props;\n\n    if(this.state.email) \n    {\n      return(\n        <div className='dashboard-container' id='dashboard-container'>\n\n          <ChatListComponent history={this.props.history} \n            userEmail={this.state.email} \n            selectChatFn={this.selectChat} \n            chats={this.state.chats} \n            selectedChatIndex={this.state.selectedChat}\n            newChatBtnFn={this.newChatBtnClicked}>\n          </ChatListComponent>\n\n          {\n            this.state.newChatFormVisible ? null : <ChatViewComponent \n              user={this.state.email} \n              chat={this.state.chats[this.state.selectedChat]}>\n            </ChatViewComponent>\n          }\n\n          { \n            this.state.selectedChat !== null && !this.state.newChatFormVisible ? <ChatTextBoxComponent userClickedInputFn={this.messageRead} submitMessageFn={this.submitMessage}></ChatTextBoxComponent> : null \n          }\n\n          {\n            this.state.newChatFormVisible ? <NewChatComponent currentuser={this.state.email}  goToChatFn={this.goToChat} newChatSubmitFn={this.newChatSubmit}></NewChatComponent> : null\n          }\n          <Button onClick={this.signOut} className={classes.signOutBtn}>Sign Out</Button>\n        </div>\n      );\n    } \n    \n    else {\n      return(<div>LOADING....</div>);\n    }\n  }\n\n\n}\n\nexport default withStyles(styles)(DashboardComponent);"]},"metadata":{},"sourceType":"module"}