{"ast":null,"code":"var _jsxFileName = \"/home/sabirhassan/Desktop/imroz2/client/src/components/dashboard/dashboard.js\";\nimport React from 'react';\nimport NewChat from '../NewChat/newChat';\nimport ChatList from '../ChatList/chatList';\nimport ChatView from '../ChatView/chatView';\nimport ChatTextBox from '../ChatTextBox/chatTextBox';\nimport styles from './styles';\nimport { Button, withStyles } from '@material-ui/core'; // I need to investigate why sometimes\n// two messages will send instead of just\n// one. I dont know if there are two instances\n// of the chat box component or what...\n// I will be using both .then and async/await\n// in this tutorial to give a feel of both.\n\nclass DashboardComponent extends React.Component {\n  constructor() {\n    super();\n\n    this.signOut = () => {//implemention for signout request\n    };\n\n    this.submitMessage = msg => {\n      const docKey = this.buildDocKey(this.state.chats[this.state.selectedChat].users.filter(_usr => _usr !== this.state.email)[0]);\n      firebase.firestore().collection('chats').doc(docKey).update({\n        messages: firebase.firestore.FieldValue.arrayUnion({\n          sender: this.state.email,\n          message: msg,\n          timestamp: Date.now()\n        }),\n        receiverHasRead: false\n      });\n    };\n\n    this.buildDocKey = friend => [this.state.email, friend].sort().join(':');\n\n    this.newChatBtnClicked = () => this.setState({\n      newChatFormVisible: true,\n      selectedChat: null\n    });\n\n    this.newChatSubmit = async chatObj => {\n      const docKey = this.buildDocKey(chatObj.sendTo);\n      await firebase.firestore().collection('chats').doc(docKey).set({\n        messages: [{\n          message: chatObj.message,\n          sender: this.state.email\n        }],\n        users: [this.state.email, chatObj.sendTo],\n        receiverHasRead: false\n      });\n      this.setState({\n        newChatFormVisible: false\n      });\n      this.selectChat(this.state.chats.length - 1);\n    };\n\n    this.selectChat = async chatIndex => {\n      await this.setState({\n        selectedChat: chatIndex,\n        newChatFormVisible: false\n      });\n      this.messageRead();\n    };\n\n    this.goToChat = async (docKey, msg) => {\n      const usersInChat = docKey.split(':');\n      const chat = this.state.chats.find(_chat => usersInChat.every(_user => _chat.users.includes(_user)));\n      this.setState({\n        newChatFormVisible: false\n      });\n      await this.selectChat(this.state.chats.indexOf(chat));\n      this.submitMessage(msg);\n    };\n\n    this.messageRead = () => {\n      const chatIndex = this.state.selectedChat;\n      const docKey = this.buildDocKey(this.state.chats[chatIndex].users.filter(_usr => _usr !== this.state.email)[0]);\n\n      if (this.clickedMessageWhereNotSender(chatIndex)) {\n        firebase.firestore().collection('chats').doc(docKey).update({\n          receiverHasRead: true\n        });\n      } else {\n        console.log('Clicked message where the user was the sender');\n      }\n    };\n\n    this.clickedMessageWhereNotSender = chatIndex => this.state.chats[chatIndex].messages[this.state.chats[chatIndex].messages.length - 1].sender !== this.state.email;\n\n    this.componentWillMount = () => {\n      firebase.auth().onAuthStateChanged(async _usr => {\n        if (!_usr) this.props.history.push('/login');else {\n          await firebase.firestore().collection('chats').where('users', 'array-contains', _usr.email).onSnapshot(async res => {\n            const chats = res.docs.map(_doc => _doc.data());\n            await this.setState({\n              email: _usr.email,\n              chats: chats,\n              friends: []\n            });\n          });\n        }\n      });\n    };\n\n    this.state = {\n      selectedChat: null,\n      newChatFormVisible: false,\n      email: null,\n      friends: [],\n      chats: []\n    };\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n\n    if (this.state.email) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"dashboard-container\",\n        id: \"dashboard-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ChatListComponent, {\n        history: this.props.history,\n        userEmail: this.state.email,\n        selectChatFn: this.selectChat,\n        chats: this.state.chats,\n        selectedChatIndex: this.state.selectedChat,\n        newChatBtnFn: this.newChatBtnClicked,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }\n      }), this.state.newChatFormVisible ? null : /*#__PURE__*/React.createElement(ChatViewComponent, {\n        user: this.state.email,\n        chat: this.state.chats[this.state.selectedChat],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 52\n        }\n      }), this.state.selectedChat !== null && !this.state.newChatFormVisible ? /*#__PURE__*/React.createElement(ChatTextBoxComponent, {\n        userClickedInputFn: this.messageRead,\n        submitMessageFn: this.submitMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 82\n        }\n      }) : null, this.state.newChatFormVisible ? /*#__PURE__*/React.createElement(NewChatComponent, {\n        goToChatFn: this.goToChat,\n        newChatSubmitFn: this.newChatSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 45\n        }\n      }) : null, /*#__PURE__*/React.createElement(Button, {\n        onClick: this.signOut,\n        className: classes.signOutBtn,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }\n      }, \"Sign Out\"));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 14\n        }\n      }, \"LOADING....\");\n    }\n  }\n\n}\n\nexport default withStyles(styles)(DashboardComponent);","map":{"version":3,"sources":["/home/sabirhassan/Desktop/imroz2/client/src/components/dashboard/dashboard.js"],"names":["React","NewChat","ChatList","ChatView","ChatTextBox","styles","Button","withStyles","DashboardComponent","Component","constructor","signOut","submitMessage","msg","docKey","buildDocKey","state","chats","selectedChat","users","filter","_usr","email","firebase","firestore","collection","doc","update","messages","FieldValue","arrayUnion","sender","message","timestamp","Date","now","receiverHasRead","friend","sort","join","newChatBtnClicked","setState","newChatFormVisible","newChatSubmit","chatObj","sendTo","set","selectChat","length","chatIndex","messageRead","goToChat","usersInChat","split","chat","find","_chat","every","_user","includes","indexOf","clickedMessageWhereNotSender","console","log","componentWillMount","auth","onAuthStateChanged","props","history","push","where","onSnapshot","res","docs","map","_doc","data","friends","render","classes","signOutBtn"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport NewChat from '../NewChat/newChat';\nimport ChatList from '../ChatList/chatList';\nimport ChatView from '../ChatView/chatView';\nimport ChatTextBox from '../ChatTextBox/chatTextBox';\n\nimport styles from './styles';\n\nimport { Button, withStyles } from '@material-ui/core';\n\n\n// I need to investigate why sometimes\n// two messages will send instead of just\n// one. I dont know if there are two instances\n// of the chat box component or what...\n\n// I will be using both .then and async/await\n// in this tutorial to give a feel of both.\n\nclass DashboardComponent extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      selectedChat: null,\n      newChatFormVisible: false,\n      email: null,\n      friends: [],\n      chats: []\n    };\n  }\n\n\n  signOut = () => {\n      //implemention for signout request\n  };\n\n  submitMessage = (msg) => {\n    const docKey = this.buildDocKey(this.state.chats[this.state.selectedChat]\n      .users\n      .filter(_usr => _usr !== this.state.email)[0])\n\n    firebase\n      .firestore()\n      .collection('chats')\n      .doc(docKey)\n      .update({\n        messages: firebase.firestore.FieldValue.arrayUnion({\n          sender: this.state.email,\n          message: msg,\n          timestamp: Date.now()\n        }),\n        receiverHasRead: false\n      });\n  }\n\n  // Always in alphabetical order:\n  // 'user1:user2'\n  buildDocKey = (friend) => [this.state.email, friend].sort().join(':');\n\n  newChatBtnClicked = () => this.setState({ newChatFormVisible: true, selectedChat: null });\n\n  newChatSubmit = async (chatObj) => {\n    const docKey = this.buildDocKey(chatObj.sendTo);\n    await \n      firebase\n        .firestore()\n        .collection('chats')\n        .doc(docKey)\n        .set({\n          messages: [{\n            message: chatObj.message,\n            sender: this.state.email\n          }],\n          users: [this.state.email, chatObj.sendTo],\n          receiverHasRead: false\n        })\n    this.setState({ newChatFormVisible: false });\n    this.selectChat(this.state.chats.length - 1);\n  }\n\n  selectChat = async (chatIndex) => {\n    await this.setState({ selectedChat: chatIndex, newChatFormVisible: false });\n    this.messageRead();\n  }\n\n  goToChat = async (docKey, msg) => {\n    const usersInChat = docKey.split(':');\n    const chat = this.state.chats.find(_chat => usersInChat.every(_user => _chat.users.includes(_user)));\n    this.setState({ newChatFormVisible: false });\n    await this.selectChat(this.state.chats.indexOf(chat));\n    this.submitMessage(msg);\n  }\n\n  // Chat index could be different than the one we are currently on in the case\n  // that we are calling this function from within a loop such as the chatList.\n  // So we will set a default value and can overwrite it when necessary.\n  messageRead = () => {\n    const chatIndex = this.state.selectedChat;\n    const docKey = this.buildDocKey(this.state.chats[chatIndex].users.filter(_usr => _usr !== this.state.email)[0]);\n    if(this.clickedMessageWhereNotSender(chatIndex)) {\n      firebase\n        .firestore()\n        .collection('chats')\n        .doc(docKey)\n        .update({ receiverHasRead: true });\n    } else {\n      console.log('Clicked message where the user was the sender');\n    }\n  }\n\n  clickedMessageWhereNotSender = (chatIndex) => this.state.chats[chatIndex].messages[this.state.chats[chatIndex].messages.length - 1].sender !== this.state.email;\n\n  componentWillMount = () => {\n      firebase.auth().onAuthStateChanged(async _usr => {\n        if(!_usr)\n          this.props.history.push('/login');\n        else {\n          await firebase\n            .firestore()\n            .collection('chats')\n            .where('users', 'array-contains', _usr.email)\n            .onSnapshot(async res => {\n              const chats = res.docs.map(_doc => _doc.data());\n              await this.setState({\n                email: _usr.email,\n                chats: chats,\n                friends: []\n              });\n            })\n        }\n    });\n  }\n\n  render() {\n\n    const { classes } = this.props;\n\n    if(this.state.email) {\n      return(\n        <div className='dashboard-container' id='dashboard-container'>\n            \n          <ChatListComponent history={this.props.history} \n            userEmail={this.state.email} \n            selectChatFn={this.selectChat} \n            chats={this.state.chats} \n            selectedChatIndex={this.state.selectedChat}\n            newChatBtnFn={this.newChatBtnClicked}>\n          </ChatListComponent>\n\n          {\n            this.state.newChatFormVisible ? null : <ChatViewComponent \n              user={this.state.email} \n              chat={this.state.chats[this.state.selectedChat]}>\n            </ChatViewComponent>\n          }\n          { \n            this.state.selectedChat !== null && !this.state.newChatFormVisible ? <ChatTextBoxComponent userClickedInputFn={this.messageRead} submitMessageFn={this.submitMessage}></ChatTextBoxComponent> : null \n          }\n          {\n            this.state.newChatFormVisible ? <NewChatComponent goToChatFn={this.goToChat} newChatSubmitFn={this.newChatSubmit}></NewChatComponent> : null\n          }\n          <Button onClick={this.signOut} className={classes.signOutBtn}>Sign Out</Button>\n        </div>\n      );\n    } else {\n      return(<div>LOADING....</div>);\n    }\n  }\n\n\n}\n\nexport default withStyles(styles)(DashboardComponent);"]},"metadata":{},"sourceType":"module"}