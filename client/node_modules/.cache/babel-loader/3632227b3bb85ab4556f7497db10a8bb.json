{"ast":null,"code":"var _jsxFileName = \"/home/sabirhassan/Desktop/imroz2/client/src/components/NewChat/newChat.js\";\nimport React from 'react';\nimport { FormControl, InputLabel, Input, Button, Paper, withStyles, CssBaseline, Typography } from '@material-ui/core';\nimport styles from './style';\nimport axios from 'axios';\n\nclass NewChatComponent extends React.Component {\n  constructor() {\n    super();\n\n    this.userTyping = (inputType, e) => {\n      switch (inputType) {\n        case 'username':\n          this.setState({\n            username: e.target.value\n          });\n          break;\n\n        case 'message':\n          this.setState({\n            message: e.target.value\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.submitNewChat = async e => {\n      e.preventDefault();\n      const userExists = await this.userExists();\n      console.log(userExists);\n\n      if (userExists) {\n        const chatExists = await this.chatExists();\n        chatExists ? this.goToChat() : this.createChat();\n      }\n    };\n\n    this.buildDocKey = () => [this.props.currentuer, this.state.username].sort().join(':');\n\n    this.createChat = () => {\n      this.props.newChatSubmitFn({\n        sendTo: this.state.username,\n        message: this.state.message\n      });\n    };\n\n    this.goToChat = () => this.props.goToChatFn(this.buildDocKey(), this.state.message);\n\n    this.chatExists = () => {\n      const docKey = this.buildDocKey();\n      axios.post('http://localhost:9000/checkchat', {\n        id: docKey\n      }).then(res => {\n        console.log(res);\n\n        if (res.data) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n    };\n\n    this.userExists = () => {\n      axios.post('http://localhost:9000/checkuser', {\n        username: this.state.username\n      }).then(res => {\n        console.log(res);\n\n        if (res.data) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n    };\n\n    this.state = {\n      username: null,\n      message: null\n    };\n  }\n\n  componentWillMount() {\n    /*\n    if(!firebase.auth().currentUser)\n      this.props.history.push('/login');\n    */\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"main\", {\n      className: classes.main,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CssBaseline, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      component: \"h1\",\n      variant: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }, \"Send A Message!\"), /*#__PURE__*/React.createElement(\"form\", {\n      className: classes.form,\n      onSubmit: e => this.submitNewChat(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      htmlFor: \"new-chat-username\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 15\n      }\n    }, \"Enter Your Friend's Email\"), /*#__PURE__*/React.createElement(Input, {\n      required: true,\n      className: classes.input,\n      autoFocus: true,\n      onChange: e => this.userTyping('username', e),\n      id: \"new-chat-username\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(FormControl, {\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      htmlFor: \"new-chat-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 15\n      }\n    }, \"Enter Your Message\"), /*#__PURE__*/React.createElement(Input, {\n      required: true,\n      className: classes.input,\n      onChange: e => this.userTyping('message', e),\n      id: \"new-chat-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      fullWidth: true,\n      variant: \"contained\",\n      color: \"primary\",\n      className: classes.submit,\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    }, \"Send\")), this.state.serverError ? /*#__PURE__*/React.createElement(Typography, {\n      component: \"h5\",\n      variant: \"h6\",\n      className: classes.errorText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    }, \"Unable to locate the user\") : null));\n  }\n\n}\n\nexport default withStyles(styles)(NewChatComponent);","map":{"version":3,"sources":["/home/sabirhassan/Desktop/imroz2/client/src/components/NewChat/newChat.js"],"names":["React","FormControl","InputLabel","Input","Button","Paper","withStyles","CssBaseline","Typography","styles","axios","NewChatComponent","Component","constructor","userTyping","inputType","e","setState","username","target","value","message","submitNewChat","preventDefault","userExists","console","log","chatExists","goToChat","createChat","buildDocKey","props","currentuer","state","sort","join","newChatSubmitFn","sendTo","goToChatFn","docKey","post","id","then","res","data","componentWillMount","render","classes","main","paper","form","input","submit","serverError","errorText"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { FormControl, InputLabel, Input, Button, Paper, withStyles, CssBaseline, Typography } from '@material-ui/core';\nimport styles from './style';\nimport axios from 'axios'\n\nclass NewChatComponent extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      username: null,\n      message: null\n    };\n  }\n\n\n\n  componentWillMount() {\n    /*\n    if(!firebase.auth().currentUser)\n      this.props.history.push('/login');\n    */\n  }\n\n  userTyping = (inputType, e) => {\n    switch (inputType) {\n      case 'username':\n        this.setState({ username: e.target.value });\n        break;\n      \n      case 'message':\n        this.setState({ message: e.target.value });\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  submitNewChat = async (e) => {\n    e.preventDefault();\n    const userExists = await this.userExists();\n    console.log(userExists)\n    if(userExists) {\n      const chatExists = await this.chatExists();\n      chatExists ? this.goToChat() : this.createChat();\n    }\n  }\n\n  buildDocKey = () => [this.props.currentuer, this.state.username].sort().join(':');\n\n  createChat = () => {\n    this.props.newChatSubmitFn({\n      sendTo: this.state.username,\n      message: this.state.message\n    });\n  }\n\n  goToChat = () => this.props.goToChatFn(this.buildDocKey(), this.state.message);\n\n  chatExists = () => {\n    const docKey = this.buildDocKey();\n    \n    axios.post('http://localhost:9000/checkchat', {id:docKey})\n    .then(res => {\n      console.log(res);\n      if(res.data){\n        return true\n      }\n      else{\n        return false\n      }\n    })\n\n\n  }\n\n  userExists =  () => {\n\n    axios.post('http://localhost:9000/checkuser', {username:this.state.username})\n    .then(res => {\n      console.log(res);\n      if(res.data){\n        return true\n      }\n      else{\n        return false\n      }\n    })\n  }\n\n  render() {\n\n    const { classes } = this.props;\n\n    return(\n      <main className={classes.main}>\n        <CssBaseline/>\n        <Paper className={classes.paper}>\n          <Typography component=\"h1\" variant=\"h5\">Send A Message!</Typography>\n          <form className={classes.form} onSubmit={(e) => this.submitNewChat(e)}>\n            <FormControl fullWidth>\n              <InputLabel htmlFor='new-chat-username'>\n                  Enter Your Friend's Email\n              </InputLabel>\n              <Input required \n                className={classes.input}\n                autoFocus \n                onChange={(e) => this.userTyping('username', e)} \n                id='new-chat-username'>\n              </Input>\n            </FormControl>\n            <FormControl fullWidth>\n              <InputLabel htmlFor='new-chat-message'>\n                  Enter Your Message\n              </InputLabel>\n              <Input required \n                className={classes.input}\n                onChange={(e) => this.userTyping('message', e)} \n                id='new-chat-message'>\n              </Input>\n            </FormControl>\n            <Button fullWidth variant='contained' color='primary' className={classes.submit} type='submit'>Send</Button>\n          </form>\n          {\n            this.state.serverError ? \n            <Typography component='h5' variant='h6' className={classes.errorText}>\n              Unable to locate the user\n            </Typography> :\n            null\n          }\n        </Paper>\n      </main>\n    );\n  }\n\n}\n\nexport default withStyles(styles)(NewChatComponent);"]},"metadata":{},"sourceType":"module"}