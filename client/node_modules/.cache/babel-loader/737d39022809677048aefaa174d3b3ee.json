{"ast":null,"code":"var _jsxFileName = \"/home/sabirhassan/Desktop/imroz2/client/src/components/ChatList/chatList.js\";\nimport React from 'react';\nimport styles from './style';\nimport { withStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport NotificationImportant from '@material-ui/icons/NotificationImportant';\n\nclass ChatList extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.userIsSender = chat => chat.messages[chat.messages.length - 1].sender === this.props.userEmail;\n\n    this.newChat = () => this.props.newChatBtnFn();\n\n    this.selectChat = index => this.props.selectChatFn(index);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n\n    if (this.props.chats.length > 0) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.root,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        fullWidth: true,\n        color: \"primary\",\n        onClick: this.newChat,\n        className: classes.newChatBtn,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }\n      }, \"New Message\"), /*#__PURE__*/React.createElement(List, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }\n      }, this.props.chats.map((_chat, _index) => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: _index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(ListItem, {\n          onClick: () => this.selectChat(_index),\n          className: classes.listItem,\n          selected: this.props.selectedChatIndex === _index,\n          alignItems: \"flex-start\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 23\n          }\n        }, /*#__PURE__*/React.createElement(ListItemAvatar, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(Avatar, {\n          alt: \"Remy Sharp\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 27\n          }\n        }, _chat.users.filter(_user => _user !== this.props.userEmail)[0].split('')[0])), /*#__PURE__*/React.createElement(ListItemText, {\n          primary: _chat.users.filter(_user => _user !== this.props.userEmail)[0],\n          secondary: /*#__PURE__*/React.createElement(React.Fragment, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 29\n            }\n          }, /*#__PURE__*/React.createElement(Typography, {\n            component: \"span\",\n            color: \"textPrimary\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 31\n            }\n          }, _chat.messages[_chat.messages.length - 1].message.substring(0, 30) + ' ...')),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }\n        }), _chat.receiverHasRead === false && !this.userIsSender(_chat) ? /*#__PURE__*/React.createElement(ListItemIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(NotificationImportant, {\n          className: classes.unreadMessage,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 41\n          }\n        })) : null), /*#__PURE__*/React.createElement(Divider, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 23\n          }\n        }));\n      })));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.root,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        fullWidth: true,\n        color: \"primary\",\n        onClick: this.newChat,\n        className: classes.newChatBtn,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }\n      }, \"New Message\"), /*#__PURE__*/React.createElement(List, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }\n      }));\n    }\n  }\n\n}\n\nexport default withStyles(styles)(ChatList);","map":{"version":3,"sources":["/home/sabirhassan/Desktop/imroz2/client/src/components/ChatList/chatList.js"],"names":["React","styles","withStyles","List","ListItem","ListItemText","ListItemAvatar","Avatar","Typography","Divider","Button","ListItemIcon","NotificationImportant","ChatList","Component","userIsSender","chat","messages","length","sender","props","userEmail","newChat","newChatBtnFn","selectChat","index","selectChatFn","render","classes","chats","root","newChatBtn","map","_chat","_index","listItem","selectedChatIndex","users","filter","_user","split","message","substring","receiverHasRead","unreadMessage"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport styles from './style';\n\n\nimport { withStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport NotificationImportant from '@material-ui/icons/NotificationImportant';\n\nclass ChatList extends React.Component {\n\n\n  userIsSender = (chat) => chat.messages[chat.messages.length - 1].sender === this.props.userEmail;\n  newChat = () => this.props.newChatBtnFn();\n  selectChat = (index) => this.props.selectChatFn(index);\n\n\n  render() {\n\n    const { classes } = this.props;\n\n    if(this.props.chats.length > 0) {\n      return(\n        <div className={classes.root}>\n            <Button variant=\"contained\" \n              fullWidth \n              color='primary' \n              onClick={this.newChat} \n              className={classes.newChatBtn}>\n                New Message\n            </Button>\n            <List>\n              {\n                this.props.chats.map((_chat, _index) => {\n                  return (\n                    <div key={_index}>\n\n                      <ListItem onClick={() => this.selectChat(_index)} \n                        className={classes.listItem} \n                        selected={this.props.selectedChatIndex === _index} \n                        alignItems=\"flex-start\">\n\n                        <ListItemAvatar>\n                          <Avatar alt=\"Remy Sharp\">{_chat.users.filter(_user => _user !== this.props.userEmail)[0].split('')[0]}</Avatar>\n                        </ListItemAvatar>\n\n                        <ListItemText \n                          primary={_chat.users.filter(_user => _user !== this.props.userEmail)[0]}\n                          secondary={\n                            <React.Fragment>\n                              <Typography component='span'\n                                color='textPrimary'>\n                                  {_chat.messages[_chat.messages.length - 1].message.substring(0, 30) + ' ...'}\n                              </Typography>\n                            </React.Fragment>\n                          }\n                          \n                        />\n                        \n                        {\n                          _chat.receiverHasRead === false && !this.userIsSender(_chat) ? \n                          <ListItemIcon><NotificationImportant className={classes.unreadMessage}></NotificationImportant></ListItemIcon> :\n                          null\n                        }\n                      \n                      </ListItem>\n                      <Divider/>\n                    </div>\n                  )\n                })\n              }\n            </List>\n        </div>\n      );\n    } else {\n      return(\n        <div className={classes.root}>\n          <Button variant=\"contained\" \n            fullWidth \n            color='primary' \n            onClick={this.newChat} \n            className={classes.newChatBtn}>\n              New Message\n          </Button>\n          <List></List>\n        </div>\n      );\n    }\n  }\n\n}\n\nexport default withStyles(styles)(ChatList);\n\n\n"]},"metadata":{},"sourceType":"module"}