{"ast":null,"code":"var _jsxFileName = \"/home/sabirhassan/Desktop/imroz2/client/src/components/dashboard/dashboard.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport socketIOClient from \"socket.io-client\";\nimport NewChatComponent from '../NewChat/newChat';\nimport ChatListComponent from '../ChatList/chatList';\nimport ChatViewComponent from '../ChatView/chatView';\nimport ChatTextBoxComponent from '../ChatTextBox/chatTextBox';\nimport styles from './style';\nimport { Button, withStyles } from '@material-ui/core'; // I need to investigate why sometimes\n// two messages will send instead of just\n// one. I dont know if there are two instances\n// of the chat box component or what...\n// I will be using both .then and async/await\n// in this tutorial to give a feel of both.\n\nclass DashboardComponent extends React.Component {\n  constructor() {\n    super();\n\n    this.signOut = () => {//implemention for signout request\n    };\n\n    this.submitMessage = msg => {\n      const docKey = this.buildDocKey(this.state.chats[this.state.selectedChat].users.filter(_usr => _usr !== this.state.email)[0]);\n      const user = {\n        id: docKey,\n        message: {\n          message: msg,\n          sender: this.state.email\n        }\n      };\n      axios.post('http://localhost:9000/sendmessage', user).then(res => {\n        console.log(res);\n\n        if (res.data) {\n          console.log(\"message sent\");\n        }\n      });\n    };\n\n    this.buildDocKey = friend => [this.state.email, friend].sort().join(':');\n\n    this.newChatBtnClicked = () => this.setState({\n      newChatFormVisible: true,\n      selectedChat: null\n    });\n\n    this.newChatSubmit = async chatObj => {\n      const docKey = this.buildDocKey(chatObj.sendTo);\n      /*\n      await \n        firebase\n          .firestore()\n          .collection('chats')\n          .doc(docKey)\n          .set({\n            messages: [{\n              message: chatObj.message,\n              sender: this.state.email\n            }],\n            users: [this.state.email, chatObj.sendTo],\n            receiverHasRead: false\n          })\n      */\n\n      const obj = {\n        id: docKey,\n        user: this.state.email,\n        friend: chatObj.sendTo,\n        message: {\n          message: chatObj.message,\n          sender: this.state.email\n        }\n      };\n      axios.post('http://localhost:9000/createchat', obj).then(res => {\n        console.log(res);\n\n        if (res.data) {\n          this.setState({\n            newChatFormVisible: false\n          });\n          this.selectChat(this.state.chats.length - 1);\n        }\n      });\n    };\n\n    this.selectChat = async chatIndex => {\n      await this.setState({\n        selectedChat: chatIndex,\n        newChatFormVisible: false\n      });\n      this.messageRead();\n    };\n\n    this.goToChat = async (docKey, msg) => {\n      const usersInChat = docKey.split(':');\n      const chat = this.state.chats.find(_chat => usersInChat.every(_user => _chat.users.includes(_user)));\n      this.setState({\n        newChatFormVisible: false\n      });\n      await this.selectChat(this.state.chats.indexOf(chat));\n      this.submitMessage(msg);\n    };\n\n    this.messageRead = () => {\n      const chatIndex = this.state.selectedChat;\n      const docKey = this.buildDocKey(this.state.chats[chatIndex].users.filter(_usr => _usr !== this.state.email)[0]);\n\n      if (this.clickedMessageWhereNotSender(chatIndex)) {\n        axios.post('http://localhost:9000/readmessage', {\n          id: docKey\n        }).then(res => {\n          console.log(res);\n        });\n      } else {\n        console.log('Clicked message where the user was the sender');\n      }\n    };\n\n    this.clickedMessageWhereNotSender = chatIndex => this.state.chats[chatIndex].messages[this.state.chats[chatIndex].messages.length - 1].sender !== this.state.email;\n\n    this.componentDidMount = () => {\n      console.log(\"component did mount\");\n      const {\n        endpoint\n      } = this.state;\n      const socket = socketIOClient(endpoint);\n      socket.on(\"update collection\", data => {\n        const usersInChat = data.id.split(':');\n\n        if (this.state.email !== '') {\n          const user = usersInChat.includes(this.state.email);\n\n          if (user) {\n            axios.post('http://localhost:9000/getchat', {\n              username: this.state.email\n            }).then(res => {\n              console.log(res);\n\n              if (res.data) {\n                this.setState({\n                  chats: res.data,\n                  friends: []\n                });\n              }\n            });\n          }\n        }\n      });\n    };\n\n    this.componentWillMount = () => {\n      const user = {\n        username: localStorage.getItem(\"username\"),\n        password: localStorage.getItem(\"password\")\n      };\n      axios.post('http://localhost:9000/login', user).then(res => {\n        console.log(res);\n\n        if (!res.data) {\n          this.props.history.push('/login');\n        } else {\n          axios.post('http://localhost:9000/getchat', user).then(res => {\n            console.log(res);\n\n            if (res.data) {\n              this.setState({\n                email: user.username,\n                chats: res.data,\n                friends: []\n              });\n            }\n          });\n        }\n      });\n    };\n\n    this.state = {\n      endpoint: 'http://localhost:9000/',\n      selectedChat: null,\n      newChatFormVisible: false,\n      email: null,\n      friends: [],\n      chats: []\n    };\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n\n    if (this.state.email) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"dashboard-container\",\n        id: \"dashboard-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ChatListComponent, {\n        history: this.props.history,\n        userEmail: this.state.email,\n        selectChatFn: this.selectChat,\n        chats: this.state.chats,\n        selectedChatIndex: this.state.selectedChat,\n        newChatBtnFn: this.newChatBtnClicked,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }\n      }), this.state.newChatFormVisible ? null : /*#__PURE__*/React.createElement(ChatViewComponent, {\n        user: this.state.email,\n        chat: this.state.chats[this.state.selectedChat],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 52\n        }\n      }), this.state.selectedChat !== null && !this.state.newChatFormVisible ? /*#__PURE__*/React.createElement(ChatTextBoxComponent, {\n        userClickedInputFn: this.messageRead,\n        submitMessageFn: this.submitMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 82\n        }\n      }) : null, this.state.newChatFormVisible ? /*#__PURE__*/React.createElement(NewChatComponent, {\n        currentuser: this.state.email,\n        goToChatFn: this.goToChat,\n        newChatSubmitFn: this.newChatSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 45\n        }\n      }) : null, /*#__PURE__*/React.createElement(Button, {\n        onClick: this.signOut,\n        className: classes.signOutBtn,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }\n      }, \"Sign Out\"));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 14\n        }\n      }, \"LOADING....\");\n    }\n  }\n\n}\n\nexport default withStyles(styles)(DashboardComponent);","map":{"version":3,"sources":["/home/sabirhassan/Desktop/imroz2/client/src/components/dashboard/dashboard.js"],"names":["React","axios","socketIOClient","NewChatComponent","ChatListComponent","ChatViewComponent","ChatTextBoxComponent","styles","Button","withStyles","DashboardComponent","Component","constructor","signOut","submitMessage","msg","docKey","buildDocKey","state","chats","selectedChat","users","filter","_usr","email","user","id","message","sender","post","then","res","console","log","data","friend","sort","join","newChatBtnClicked","setState","newChatFormVisible","newChatSubmit","chatObj","sendTo","obj","selectChat","length","chatIndex","messageRead","goToChat","usersInChat","split","chat","find","_chat","every","_user","includes","indexOf","clickedMessageWhereNotSender","messages","componentDidMount","endpoint","socket","on","username","friends","componentWillMount","localStorage","getItem","password","props","history","push","render","classes","signOutBtn"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nimport socketIOClient from \"socket.io-client\";\n\n\nimport NewChatComponent from '../NewChat/newChat';\nimport ChatListComponent from '../ChatList/chatList';\nimport ChatViewComponent from '../ChatView/chatView';\nimport ChatTextBoxComponent from '../ChatTextBox/chatTextBox';\n\nimport styles from './style';\n\nimport { Button, withStyles } from '@material-ui/core';\n\n\n// I need to investigate why sometimes\n// two messages will send instead of just\n// one. I dont know if there are two instances\n// of the chat box component or what...\n\n// I will be using both .then and async/await\n// in this tutorial to give a feel of both.\n\nclass DashboardComponent extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      endpoint : 'http://localhost:9000/',\n      selectedChat: null,\n      newChatFormVisible: false,\n      email: null,\n      friends: [],\n      chats: []\n    };\n  }\n\n\n  signOut = () => {\n      //implemention for signout request\n  };\n\n  submitMessage = (msg) => {\n    \n    const docKey = this.buildDocKey(this.state.chats[this.state.selectedChat]\n      .users\n      .filter(_usr => _usr !== this.state.email)[0])\n\n    const user ={\n      id:docKey,\n      message:{message:msg,sender:this.state.email}\n    }\n\n    axios.post('http://localhost:9000/sendmessage', user)\n    .then(res => {\n      console.log(res);\n      if(res.data){\n        console.log(\"message sent\")\n\n      }\n      \n      \n    })\n\n  }\n\n  // Always in alphabetical order:\n  // 'user1:user2'\n  buildDocKey = (friend) => [this.state.email, friend].sort().join(':');\n\n  newChatBtnClicked = () => this.setState({ newChatFormVisible: true, selectedChat: null });\n\n  newChatSubmit = async (chatObj) => {\n    const docKey = this.buildDocKey(chatObj.sendTo);\n    /*\n    await \n      firebase\n        .firestore()\n        .collection('chats')\n        .doc(docKey)\n        .set({\n          messages: [{\n            message: chatObj.message,\n            sender: this.state.email\n          }],\n          users: [this.state.email, chatObj.sendTo],\n          receiverHasRead: false\n        })\n    */\n   const obj ={id:docKey,user:this.state.email,friend:chatObj.sendTo,message:{message:chatObj.message,sender:this.state.email}}\n   axios.post('http://localhost:9000/createchat', obj)\n   .then(res => {\n     console.log(res);\n     if(res.data){\n\n      this.setState({ newChatFormVisible: false });\n      this.selectChat(this.state.chats.length - 1);\n  \n     }\n   })\n\n  }\n\n  selectChat = async (chatIndex) => {\n    await this.setState({ selectedChat: chatIndex, newChatFormVisible: false });\n    this.messageRead();\n  }\n\n  goToChat = async (docKey, msg) => {\n    const usersInChat = docKey.split(':');\n    const chat = this.state.chats.find(_chat => usersInChat.every(_user => _chat.users.includes(_user)));\n    this.setState({ newChatFormVisible: false });\n    await this.selectChat(this.state.chats.indexOf(chat));\n    this.submitMessage(msg);\n  }\n\n  // Chat index could be different than the one we are currently on in the case\n  // that we are calling this function from within a loop such as the chatList.\n  // So we will set a default value and can overwrite it when necessary.\n  messageRead = () => {\n    const chatIndex = this.state.selectedChat;\n    const docKey = this.buildDocKey(this.state.chats[chatIndex].users.filter(_usr => _usr !== this.state.email)[0]);\n    if(this.clickedMessageWhereNotSender(chatIndex)) {\n\n       axios.post('http://localhost:9000/readmessage', {id:docKey})\n       .then(res => {\n         console.log(res);\n       })\n\n    } \n    else {\n      console.log('Clicked message where the user was the sender');\n    }\n  }\n\n  clickedMessageWhereNotSender = (chatIndex) => this.state.chats[chatIndex].messages[this.state.chats[chatIndex].messages.length - 1].sender !== this.state.email;\n\n\n  componentDidMount = () => {\n\n    console.log(\"component did mount\");\n    \n    const {endpoint} = this.state;\n    const socket = socketIOClient(endpoint);\n    socket.on(\"update collection\", data => {\n\n    const usersInChat = data.id.split(':')\n\n    if(this.state.email!==''){\n      const user = usersInChat.includes(this.state.email)\n      if(user){\n        \n        axios.post('http://localhost:9000/getchat', {username:this.state.email})\n        .then(res => {\n          console.log(res);\n          if(res.data)\n          {\n            this.setState({\n              chats: res.data,\n              friends: []\n            });\n          }\n        })\n      }\n\n    }\n\n    });\n\n  }\n\n  componentWillMount = () => {\n\n\n    const user ={\n      username:localStorage.getItem(\"username\"),\n      password:localStorage.getItem(\"password\")\n    }\n\n    axios.post('http://localhost:9000/login', user)\n    .then(res => {\n      console.log(res);\n      if(!(res.data)){\n\n        this.props.history.push('/login');\n      }\n      else{\n\n        axios.post('http://localhost:9000/getchat', user)\n        .then(res => {\n          console.log(res);\n          if(res.data){\n            this.setState({\n              email: user.username,\n              chats: res.data,\n              friends: []\n            });\n    \n          }\n        })\n      \n      }\n    })\n\n  }\n\n  render() {\n\n    const { classes } = this.props;\n\n    if(this.state.email) \n    {\n      return(\n        <div className='dashboard-container' id='dashboard-container'>\n\n          <ChatListComponent history={this.props.history} \n            userEmail={this.state.email} \n            selectChatFn={this.selectChat} \n            chats={this.state.chats} \n            selectedChatIndex={this.state.selectedChat}\n            newChatBtnFn={this.newChatBtnClicked}>\n          </ChatListComponent>\n\n          {\n            this.state.newChatFormVisible ? null : <ChatViewComponent \n              user={this.state.email} \n              chat={this.state.chats[this.state.selectedChat]}>\n            </ChatViewComponent>\n          }\n\n          { \n            this.state.selectedChat !== null && !this.state.newChatFormVisible ? <ChatTextBoxComponent userClickedInputFn={this.messageRead} submitMessageFn={this.submitMessage}></ChatTextBoxComponent> : null \n          }\n\n          {\n            this.state.newChatFormVisible ? <NewChatComponent currentuser={this.state.email}  goToChatFn={this.goToChat} newChatSubmitFn={this.newChatSubmit}></NewChatComponent> : null\n          }\n          <Button onClick={this.signOut} className={classes.signOutBtn}>Sign Out</Button>\n        </div>\n      );\n    } \n    \n    else {\n      return(<div>LOADING....</div>);\n    }\n  }\n\n\n}\n\nexport default withStyles(styles)(DashboardComponent);"]},"metadata":{},"sourceType":"module"}